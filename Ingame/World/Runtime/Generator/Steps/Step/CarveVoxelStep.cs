/*
 * ==========================================================================================
 * 범용 복셀 조각(Carve) 단계 (CarveVoxelStep)
 * ==========================================================================================
 *
 * [역할]
 * - 이 단계는 외부(e.g., CreateRoomsStep, ConnectRegionsStep)로부터 깎아낼 구(Sphere) 목록을
 * 입력받아, 실제 복셀 데이터를 효율적으로 수정하는 **재사용 가능한 범용 도구**입니다.
 * - '무엇을' 깎을지는 다른 단계가 결정하고, 이 단계는 '어떻게' 깎을지에 대한 최적화된 방법을 제공합니다.
 *
 * [핵심 작동 방식]
 * 이 단계는 대량의 데이터를 처리하기 위해 아래와 같은 3단계 파이프라인으로 작동합니다.
 *
 * 1. 입력 데이터 수집 (Input)
 * - 깎아낼 모든 구의 파라미터가 담긴 단일 `NativeArray<SphereParams>`를 입력으로 받습니다.
 *
 * 2. 공간 분할 (Spatial Partitioning) - 확장성(Scalability)의 핵심
 * - 입력된 구의 개수가 임계값 이상으로 많을 경우, 전처리 Job을 실행하여 **공간 그리드(해시맵)**를 생성합니다.
 * - 이 그리드는 각 공간 셀(cell)에 어떤 구들이 포함되는지를 미리 매핑해두는 역할을 합니다.
 * - 이 과정을 통해, 이후의 Carve Job들이 월드 전체가 아닌 자신과 관련된 좁은 영역의 구들만
 * 고려하게 만들어 알고리즘의 성능이 **지역 밀도(Local Density)**에만 의존하도록 만듭니다.
 *
 * 3. 병렬 조각 (Parallel Carving) - 효율성(Efficiency)의 핵심
 * - 월드의 각 청크(Chunk)마다 '구체 중심(Sphere-Centric)' 방식의 Carve Job을 스케줄링합니다.
 * - 각 Job은 (2)에서 생성된 공간 그리드를 참조하여, 자신과 겹치는 구들만 효율적으로 필터링한 후
 * 실제 복셀 데이터를 수정합니다.
 *
 * [설계 목표]
 * - 재사용성: 어떤 기능이든 '구 목록'만 만들어 전달하면 복잡한 최적화 과정 없이 조각 기능을 사용 가능.
 * - 확장성: 처리할 구의 개수가 수백만 개로 늘어나도 성능 저하가 최소화되도록 함.
 * - 효율성: 모든 무거운 연산은 Burst 컴파일된 Job을 통해 병렬로 처리.
 */